# -*- coding: utf-8 -*-
"""Task1 IRIS Flower Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NmlL16jCYNExYVXKlbn7NDWJSVChVh_s
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
 #IN ORDER TO IGNORE WARINING
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/Iris.csv')
df

df=pd.DataFrame(df)
df.head()

df.drop(["Id"],axis=1,inplace=True)
# removing unwanted columns --i.e,Id
df.head()

df.shape
# shows the no.of columns and no.of rows
# dataset contains 150 rows and 5 columns

df.info()

df.describe()

print(df['Species'].unique())

df.isnull().sum()
# no null values were present in dataset

"""'''# VISUALISATION'''

"""

plt.scatter(df['PetalWidthCm'],df['PetalLengthCm'])
plt.show()

plt.scatter(df['SepalWidthCm'],df['SepalLengthCm'])
plt.show()

sns.violinplot(data=df[['PetalWidthCm','PetalLengthCm','SepalWidthCm','SepalLengthCm']])
ata=plt.show()

sns.boxplot(data=df[['PetalWidthCm','PetalLengthCm','SepalWidthCm','SepalLengthCm']])
plt.show()

sns.pairplot(df,hue="Species")
plt.show()

"""'''# SPLITTING THE DATASET INTO TRAINING & TESTING DATASETS '''"""

x=df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]
y=df['Species']

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.1,random_state=41)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

"""'''IMPORTING MODELS'''"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier

"""'''# LOGISTIC REGRESSION'''

"""

# creating
model=LogisticRegression(solver='liblinear',max_iter=1000)
#Training the model
model.fit(x_train,y_train)
# make predictions on the test data
y_prd=model.predict(x_test)
from sklearn.metrics import accuracy_score
#performance
accuracy=accuracy_score(y_test,y_prd)
print("Accuracy:",accuracy)

"""'''# (SVM)SUPPORT VECTOR MACHINES'''"""

# Creating
clf=SVC()
#Training the model
clf.fit(x_train,y_train)
#make predictions on the data
y_prd=clf.predict(x_test)
# Performace
accuracy=accuracy_score(y_test,y_prd)
print("Accuracy:",accuracy)

"""'''# DECISION TREE CLASSIFIER'''"""

# Creating
classifier = DecisionTreeClassifier()
# Training the model
classifier.fit(x_train,y_train)
# Make predictions on the testing data
y_prediction=classifier.predict(x_test)
from sklearn.metrics import accuracy_score
# performance
accuracy=accuracy_score(y_test,y_prediction)
print('Accuracy:', accuracy)

"""'''#TASK1 COMPLETED SUCCESSFULLY'''"""