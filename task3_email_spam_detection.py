# -*- coding: utf-8 -*-
"""TASK3_Email_Spam_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A3sLHRw8O9v8-f0A4Nd_mojDKeTaHicY

#  EMAIL SPAM DETECTION WITH MACHINE LEARNING
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv(r'/content/archive (4).zip', encoding='ISO-8859-1')
df.head()

df.tail()

df.describe

#show the no.of missing(NAN,NaN,na)data for each column
df.isnull().sum()

#removing unneccessary columns from the dataset
df.drop(['Unnamed: 2',	'Unnamed: 3',	'Unnamed: 4'],axis=1,inplace=True)

#changing the column name for better understanding(V1,V2 to SPAM,TEXT)
df.rename({'v1': 'SPAM','v2': 'TEXT'},axis=1,inplace=True)
df.head()

df.duplicated().sum()

df.drop_duplicates(keep='first',inplace=True)

df.duplicated().sum()

#converting SPAM column to numerical values
df['SPAM'] = df['SPAM'].map({'ham': 0, 'spam': 1})

"""# VISUALIZATION"""

plt.pie(df['SPAM'].value_counts(),labels=['ham','spam'],autopct="%0.2f")
plt.show()

"""# SPLITTING INTO TRAINING AND TESTING DATA"""

X=df['TEXT']
y=df['SPAM']

X

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.2,random_state=43)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

#preprocessing tool or utility class (LABELENCODER)
from sklearn.preprocessing import LabelEncoder
ec=LabelEncoder()
df['SPAM']=ec.fit_transform(df['SPAM'])
df['SPAM']

ec=LabelEncoder()
y_train = ec.fit_transform(y_train)
y_test = ec.transform(y_test)

print(X_train)
print(X_test)

#feature extraction technique (COUNTVECTORIZER)
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer()

# Fit the vectorizer on the training data and transform the training data
X_train_cv = cv.fit_transform(X_train)

# Transform the testing data using the fitted vectorizer
X_test_cv = cv.transform(X_test)
print(X_train_cv)

"""# IMPORTING MACHINE LEARNING MODELS"""

from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression

"""# 01-LOGISTIC REGRESSION"""

#create and train the LOGISTIC REGRESSION
ln=LogisticRegression()
ln.fit(X_train_cv,y_train)
prediction_train=ln.predict(X_train_cv)
prediction_test=ln.predict(X_test_cv)

#printing predictions and actual values after trained
print(ln.predict(X_train_cv))
print(y_train)

#Evaluate the model on the training dataset
from sklearn.metrics import accuracy_score,confusion_matrix
print('confusion matrix:\n',confusion_matrix(y_train,prediction_train))
print('Accuracy:',accuracy_score(y_train,prediction_train))

"""# 02-Multinomial Naive Bayes"""

#create and train the NAIVE BAYES CLASSIFIER
from sklearn.naive_bayes import MultinomialNB
naive_bayes=MultinomialNB().fit(X_train_cv,y_train)
naive_bayes.fit(X_train_cv,y_train)

#printing predictions and actual values after trained
print(naive_bayes.predict(X_train_cv))
print(y_train)

#Evaluate the model on the training dataset
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
prediction=naive_bayes.predict(X_train_cv)
print(classification_report(y_train,prediction))
print()
print('confusion Matrix:\n',confusion_matrix(y_train,prediction))
print()
print('Accuracy:', accuracy_score(y_train,prediction))

#printing predictions and actual values after testing
print(naive_bayes.predict(X_test_cv))
print(y_test)

#Evaluate the model on the testing dataset
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
pred=naive_bayes.predict(X_test_cv)
print(classification_report(y_test,pred))
print()
print('confusion Matrix:\n',confusion_matrix(y_test,pred))
print()
print('Accuracy:', accuracy_score(y_test,pred))

"""#TASK3 COMPLETED SUCCESSFULLY"""